import Head from 'next/head'
import { Inter } from 'next/font/google'
import { Button, Col, DatePicker, Form, Input, Layout, Menu, Modal, Radio, Row, Space, Table } from 'antd';
import 'antd/dist/reset.css';
import { ColumnsType } from 'antd/es/table';
import { useEffect, useState } from 'react';
import { userActions } from '@/redux/slices/user.slice';
import { RootState } from '../redux';
import { connect } from 'react-redux';
import moment from 'moment';
import { DataUser } from '@/redux/types/user.type';
import MessageHandler from '@/libraries/message-handler';
// import Table, { ColumnsType } from 'antd/es/table';

const inter = Inter({ subsets: ['latin'] })

interface HomeInterface {
  user: any;
  onGetDataUser: typeof userActions.getDataUserFetch;
  onCreateDataUser: typeof userActions.createDataUserFetch;
  onGetDataUserDetail: typeof userActions.getDataUserDetailFetch;
  onUpdateDataUser: typeof userActions.updateDataUserFetch;
  onDeleteDataUser: typeof userActions.deleteDataUserFetch;
}

const Home = (props: HomeInterface) => {

  const {
    user,
    onGetDataUser,
    onCreateDataUser,
    onGetDataUserDetail,
    onUpdateDataUser,
    onDeleteDataUser
  } = props;

  const [form] = Form.useForm();
  const [formUpdate] = Form.useForm();

  const [openModalCreate, setOpenModalCreate] = useState<boolean>(false);
  const [openModalDetail, setOpenModalDetail] = useState<boolean>(false);
  const [viewMode, setViewMode] = useState<boolean>(false);
  const [selectedId, setSelectedId] = useState<number>(0);
  const [isShowLoading,setIsShowLoading] = useState<boolean>(false);

  const columns: ColumnsType<DataUser> = [
    {
      title: 'No.',
      dataIndex: 'no',
      key: 'no'
    },
    {
      title: 'Nama',
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: 'Alamat',
      dataIndex: 'address',
      key: 'address',
    },
    {
      title: 'P/W',
      dataIndex: 'gender',
      key: 'gender',
      render: (text: string) => {
        if (text === "l") {
          return "Pria";
        }
        return "Wanita";
      }
    },
    {
      title: 'Tanggal Lahir',
      dataIndex: 'born_date',
      key: 'born_date',
      render: (text: string) => {
        return moment(text).format("DD MMM YYYY")
      }
    },
    {
      title: 'Action',
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <a onClick={() => {
            setSelectedId(record.id);
            setViewMode(true);
            setOpenModalDetail(true);
          }}>View</a>
          <a onClick={() => {
            setSelectedId(record.id);
            setViewMode(false);
            setOpenModalDetail(true);
          }}>Edit</a>
          <a onClick={() => {
            onDeleteDataUser({id: record.id});
          }}>Delete</a>
        </Space>
      ),
    },
  ];

  useEffect(() => {
    onGetDataUser();
  }, []);

  useEffect(() => {
    if (selectedId !== 0) {
      onGetDataUserDetail({id: selectedId});
    }
  }, [selectedId]);

  useEffect(() => {

    if (user.detailUser) {
      formUpdate.setFieldValue('name', user.detailUser.name);
      formUpdate.setFieldValue('address', user.detailUser.address);
      formUpdate.setFieldValue('gender', user.detailUser.gender);
      formUpdate.setFieldValue('birthdate', moment(user.detailUser.born_date));
    }
  }, [user.detailUser]);

  const handleSave = () => {
    setIsShowLoading(true);
    form.validateFields()
      .then((val) => {
        const formData = {
          name: val.name,
          address: val.address,
          gender: val.gender,
          born_date: val.birthdate.format("YYYY-MM-DD"),
        }
        onCreateDataUser(formData);
        setIsShowLoading(false);
        setOpenModalCreate(false);
      })
  }

  const handleUpdate = () => {

    if (viewMode) {
      MessageHandler().error("You're in view mode");
      return false;
    }
  setIsShowLoading(true);
    formUpdate.validateFields()
      .then((val) => {
        const formData = {
          id: selectedId,
          name: val.name,
          address: val.address,
          gender: val.gender,
          born_date: moment(val.birthdate).format("YYYY-MM-DD"),
        }
        onUpdateDataUser(formData);
        setIsShowLoading(false);
        setOpenModalDetail(false);
      })
  }

  return (
    <>
      <Head>
        <title>Ihsan Solusi</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout className="layout">
        <Layout.Header>
          <Menu
            theme="dark"
            mode="horizontal"
            defaultSelectedKeys={['1']}
            items={
              [
                {key: 'ihsansolusi', label: 'Ihsan Solusi Demo App'}
              ]
            }
          />
        </Layout.Header>
        <Layout.Content style={{ padding: '50px', background: '#fff' }}>
          <div className="site-layout-content">
            <Button onClick={()=>setOpenModalCreate(true)}>Tambah User</Button>
            <div style={{ marginTop: '15px' }}>
              <Table columns={columns} dataSource={user.data} pagination={false} loading={user.isLoading}/>
            </div>            
          </div>
        </Layout.Content>
      </Layout>

      <Modal title="Tambah User" open={openModalCreate} onCancel={() => setOpenModalCreate(false)} onOk={() => handleSave()} okText="Save">
        <Form form={form} layout='vertical'>
          <Form.Item
            name="name"
            label="Nama"
            rules={
              [
                {required: true, message: 'Field "Nama" is required'},
                {min: 8, message: 'name Length Must be Longer than or same as 8'}
              ]
            }
          >
            <Input id='name' placeholder='Masukkan nama user' />
          </Form.Item>
          <Form.Item
            name="address"
            label="Alamat"
            rules={
              [
                {required: true, message: 'Field "Alamat" is required'}
              ]
            }
          >
            <Input id='address' placeholder='Masukkan alamat user' />
          </Form.Item>
          <Form.Item
            name="gender"
            label="P/W"
            rules={
              [
                {required: true, message: 'Field "P/W" is required'}
              ]
            }
          >
            <Radio.Group options={
              [
                {label: 'Pria', value: 'l'},
                {label: 'Wanita', value: 'p'},
              ]
            }  id="gender"/>
          </Form.Item>
          <Form.Item
            name="birthdate"
            label="Tanggal Lahir"
            rules={
              [
                {required: true, message: 'Field "Tanggal Lahir" is required'}
              ]
            }
          >
            <DatePicker id='birthdate' format="YYYY-MM-DD" />
          </Form.Item>
        </Form>
      </Modal>

      <Modal title={viewMode ? "View Data User" : "Edit Data User"} open={openModalDetail} onCancel={() => {
        setOpenModalDetail(false);
        setViewMode(false);
      }} onOk={() => {
        handleUpdate();
      }} okText="Save" confirmLoading={isShowLoading}>
        <Form form={formUpdate} layout='vertical'>
          <Form.Item
            name="name"
            label="Nama"
            rules={
              [
                {required: true, message: 'Field "Nama" is required'},
                {min: 8, message: 'name Length Must be Longer than or same as 8'}
              ]
            }
          >
            <Input id='name' placeholder='Masukkan nama user' disabled={viewMode}/>
          </Form.Item>
          <Form.Item
            name="address"
            label="Alamat"
            rules={
              [
                {required: true, message: 'Field "Alamat" is required'}
              ]
            }
          >
            <Input id='address' placeholder='Masukkan alamat user' disabled={viewMode}/>
          </Form.Item>
          <Form.Item
            name="gender"
            label="P/W"
            rules={
              [
                {required: true, message: 'Field "P/W" is required'}
              ]
            }
          >
            <Radio.Group options={
              [
                {label: 'Pria', value: 'l'},
                {label: 'Wanita', value: 'p'},
              ]
            }  id="gender" disabled={viewMode}/>
          </Form.Item>
          <Form.Item
            name="birthdate"
            label="Tanggal Lahir"
            rules={
              [
                {required: true, message: 'Field "Tanggal Lahir" is required'}
              ]
            }
          >
            <DatePicker id='birthdate' format="YYYY-MM-DD"/>
          </Form.Item>
        </Form>
      </Modal>
    </>
  )
}

const mapStateToProps = (state: RootState)=> ({
  user: state.user
})
const mapDispatchToProps = {
  onGetDataUser: userActions.getDataUserFetch,
  onCreateDataUser: userActions.createDataUserFetch,
  onGetDataUserDetail: userActions.getDataUserDetailFetch,
  onUpdateDataUser: userActions.updateDataUserFetch,
  onDeleteDataUser: userActions.deleteDataUserFetch
}

export default connect(mapStateToProps, mapDispatchToProps)(Home);
